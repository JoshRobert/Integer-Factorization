    /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package integerfactorization;

import java.util.ArrayList;
import java.util.Scanner;

/**
 *
 * @author Josh
 * 
 */
public class IntegerFactorization {

    /**
     * Gets all the factors of a given number
     * @param number to get factors
     * @return List of factors for given number
     */
    public static ArrayList<Integer> factors(int number) {
        ArrayList<Integer> factors = new ArrayList<>();
        for (int i = 2, j = 0; i <= number / 2; i++) {
            if (number % i == 0) {

                factors.add((Integer) (number / i));
            }
        }
        return factors;

    }

    /**
     * Checks if a given number is prime 
     * @param number to check
     * @return true or false if number is prime
     */
    public static boolean isPrime(int number) {
        for (int i = 2; i <= number / 2; i++) {
            if (number % i == 0) {
                return false;
            }

        }
        return true;
    }

    /**
     * gets all the prime between 2 and a given number
     * @param num upper limit for getting primes
     * @return a list of all prime numbers between 2 and given number
     */
    public static ArrayList<Integer> calcPrimeNumbers(int num) {
        ArrayList<Integer> prime = new ArrayList<>();
        int count = 2;
        while (count <= num) {

            if (isPrime(count)) {
                prime.add(count);

            }

            count++;
        }
        System.out.println("The primes less than or equal to " + num + " are:");
        for (int i = 0; i < prime.size(); i++) {
            System.out.print(prime.get(i) + " ");
        }
        return prime;

    }

    /**
     *
     * @param num
     * @return
     */
    public static boolean isOdd(int num) {
        return num % 2 != 0;
    }

    /**
     *
     * @param num
     * @return
     */
    public static boolean isEven(int num) {
        return num % 2 == 0;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here

       System.out.println("Enter the number you want to factorize");
       Scanner input=new Scanner(System.in);
        int num = input.nextInt();
        //gets all the factors for given number
        ArrayList factors = factors(num);

        //displays these factors NOTE: this should not be included in the analysis
        System.out.println("Factors of " + num + " are:");
        for (Object i : factors) {
            System.out.print(i + " ");
        }
        int x = factors.size() / 2;
        
        //checks if the number is prime Check cost of isPrime() use worst case
        boolean factorIsPrime = isPrime((Integer) (factors.get(x)));

        int factor = (int) factors.get(x);
        int factor2 = factor;
        //try-catch can be changed just fixing things
        try {
            factor2 = (int) factors.get(x - 1);
        } catch (Exception e) {

        }
        int prime = factor;
        
        //if the two factors are multiples of each other like 9 and 3 this basically removes it and just uses 1
        double logfunct = Math.log(factor2) / Math.log(prime);
        if (logfunct == (int) (logfunct)) {

            factors.clear();
            factors.add(factor);
        }
        prime = factor2;
        logfunct = Math.log(factor) / Math.log(prime);
        if (logfunct == (int) (logfunct)) {

            factors.clear();
            factors.add(factor2);

        }
        if (factors.size() >= 2) {
            factor = (int) factors.get(x);
            factor2 = (int) factors.get(x - 1);
            System.out.println("\nOptimum factors are " + factor + " and " + factor2);

            //checks if the other optimum factor is prime if it is then no more breaking down is done
            boolean otherIsPrime = isPrime((Integer) (factor2));

            ArrayList<Integer> primeNumbers = calcPrimeNumbers((int) factors.get(x - 1));
            System.out.print("\n" + factor + "=");
            //checks if the the number can be broken down into other prime numbers if it can then breaks them down
            if (!factorIsPrime && (isOdd(factor) || isEven(factor))) {
                ArrayList<Integer> divisors = new ArrayList<>();
                for (int i = 0; i < primeNumbers.size() - 1; i++) {
                    prime = primeNumbers.get(i);

                    if (factor % prime == 0) {
                        factor = factor / prime;
                        divisors.add(prime);
                        i = 0;
                    }
                    if (factor <= 3) {
                        break;
                    }
                }
                for (Object i : divisors) {
                    System.out.print(i + "*");
                }

            }
            //once down with that form of break down tries to break the rest down using exponents trying to express it
            // as an exponent of a prime number ie if we still have something like 2^1 or 3^2

            if (!factorIsPrime && factor != 1) {
                int y = factor / 2;
                
                for (int i = 0; i <= y && i < primeNumbers.size() - 1; i++) {
                    prime = primeNumbers.get(i);
                    logfunct = Math.log(factor) / Math.log(prime);
                    if (logfunct == (int) (logfunct)) {
                        System.out.println(prime + "^" + (int) (logfunct));
                    }
                }

            } else {
                System.out.print(factor);
            }
            System.out.print("\n" + factor2 + "=");
            
            if (!otherIsPrime && (isOdd(factor2) || isEven(factor2))) {
                ArrayList<Integer> divisors = new ArrayList<>();
                for (int i = 0; i < primeNumbers.size() - 1; i++) {
                    prime = primeNumbers.get(i);

                    if (factor2 % prime == 0) {
                        factor2 = factor2 / prime;
                        divisors.add(prime);
                        i = 0;
                    }
                    if (factor2 <= 2) {
                        break;
                    }
                }
                for (Object i : divisors) {
                    System.out.print(i + "*");
                }

            }
            if (!otherIsPrime && factor2 != 1) {
                int y = (int) factor2 / 2;

                for (int i = 0; i <= y && i < primeNumbers.size() - 1; i++) {
                    prime = primeNumbers.get(i);
                    logfunct = Math.log(factor2) / Math.log(prime);
                    if (logfunct == (int) (logfunct)) {
                        System.out.println(prime + "^" + (int) (logfunct));

                    }
                }

            } else {
                System.out.print(factor2);
            }
            System.out.println("\n" + factors.get(x) + " is prime? \t" + factorIsPrime);
            System.out.println(factors.get(x - 1) + " is prime? \t" + otherIsPrime);
        } else {

            System.out.println("\n" + factors.get(0) + " is prime? \t" + factorIsPrime);
            prime = (int) factors.get(0);
            logfunct = Math.log(num) / Math.log(prime);
            System.out.println("\n" + prime + "^" + (int) (logfunct));
        }

    }
}
